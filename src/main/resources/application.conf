app{
  minefield{
    default-rows= 9
    default-columns= 9
    default-mines= 15
  }
  default{
    ask-seconds-timeout= 25s
    game-actor{
      idle-max-time: 30min
    }
  }
}

cors{
  // If empty all origins are allowed
  allowed-origins = []
  allowed-origins = ${?ALLOWED_ORIGINS}
}

mongo-async-driver {
  akka {
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]
    loglevel = DEBUG
  }
}

akka {
  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  loglevel = INFO
  stdout-loglevel = INFO
  http {
    server {
      server-header = "minesweeper-API"
      request-timeout = 30s
    }
  }

  actor{
    deployment{
      /gameManager{
        # Consistent hashing in memory pool similar to sharding for akka clustering
        router = consistent-hashing-pool
        resizer {
          nr-of-instances = 6
          virtual-nodes-factor = 18
        }
      }
    }
    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "co.com.minesweeper.model.messages.GameState"   = kryo
      "co.com.minesweeper.model.messages.GameHistory" = kryo
    }
    kryo  {
      idstrategy = "incremental"
      kryo-trace = false
      implicit-registration-logging = true
      # Class Mapping for incremental strategy with same id (useful for akka-remote)

      // explicit mappings recommended, required for persistence to work properly on any sceneario
      // Recommended also on remote, in case of node crash, to avoid serialization problems
      mappings {
        "co.com.minesweeper.model.GameStatus$Active$"     = 80
        "co.com.minesweeper.model.GameStatus$Won$"        = 81
        "co.com.minesweeper.model.GameStatus$Lose$"       = 82
        "co.com.minesweeper.model.Minefield"              = 83
        "co.com.minesweeper.model.FieldType$Hint$"        = 84
        "co.com.minesweeper.model.FieldType$Mine$"        = 85
        "co.com.minesweeper.model.FieldType$Empty$"       = 86
        "co.com.minesweeper.model.MarkType$None$"         = 87
        "co.com.minesweeper.model.MarkType$QuestionMark$" = 88
        "co.com.minesweeper.model.MarkType$FlagMark$"     = 89
        "co.com.minesweeper.model.Field"                  = 90
        "co.com.minesweeper.model.messages.GameState"     = 91
        "co.com.minesweeper.model.messages.GameHistory"   = 92
        "[[Lco.com.minesweeper.model.Field;"              = 100
        "[Lco.com.minesweeper.model.Field;"               = 101
        "scala.collection.immutable.$colon$colon"         = 990
        "scala.Some"                                      = 991
        "scala.None$"                                     = 992

      }
    }
  }

  persistence{
    journal{
      plugin = "akka-contrib-mongodb-persistence-journal"
      akka-contrib-mongodb-persistence-journal.replay-filter{
        mode = repair-by-discard-old
      }
    }
    snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
  }

  // Reactive Mongo Persistence Plugin custom configuration
  contrib{
    persistence{
      mongodb{
        mongo{
          mongouri = "mongodb://mongoadmin:mongoadmin@192.168.99.100:27017/admin" // minesweeper-admin:minesweeper-admin93
          mongouri = ${?MOGODB_URL}
          database = "minesweeper-akka-persistence"
          journal-write-concern = "Acknowledged"
          journal-collection = "akka_journal"
          snaps-collection   = "akka_snapshot"
        }
        rxmongo{
          failover {
            initialDelay = 2000ms
            retries = 3
            growth = exp
            factor = 1.5
          }
        }
      }
    }
  }

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

}

dispatchers{
  base-dispatcher{
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "thread-pool-executor"
    # Configuration for the thread pool
    thread-pool-executor {
      keep-alive-time = 120s
      # minimum number of threads to cap factor-based core number to
      core-pool-size-min = 8
      # No of core threads ... ceil(available processors * factor)
      core-pool-size-factor = 3.0
      # maximum number of threads to cap factor-based number to
      core-pool-size-max = 64
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 2
  }
}

http {
  host = "0.0.0.0"
  port = 8010
}