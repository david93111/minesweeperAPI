app{
  minefield{
    default-rows= 9
    default-columns= 9
    default-mines= 15
  }
  default{
    ask-seconds-timeout= 25s
    game-actor{
      idle-max-time: 30m
    }
  }
}

cors{
  // If empty all origins are allowed
  allowed-origins = []
  allowed-origins = ${?ALLOWED_ORIGINS}
}

mongo-async-driver {
  akka {
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]
    loglevel = DEBUG
  }
}

akka {
  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  loglevel = INFO
  stdout-loglevel = INFO
  http {
    server {
      server-header = "minesweeper-API"
      request-timeout = 30s
    }
  }

  actor{
    deployment{
      /gameManager{
        # Consistent hashing in memory pool similar to sharding for akka clustering
        router = consistent-hashing-pool
        resizer {
          nr-of-instances = 6
          virtual-nodes-factor = 18
        }
      }
    }
  }

  persistence{
    journal{
      plugin = "akka-contrib-mongodb-persistence-journal"
      akka-contrib-mongodb-persistence-journal.replay-filter{
        mode = repair-by-discard-old
      }
    }
    snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
  }

  // Reactive Mongo Persistence Plugin custom configuration
  contrib{
    persistence{
      mongodb{
        mongo{
          mongouri = "mongodb://mongoadmin:mongoadmin@127.0.0.1:27017/admin"
          mongouri = ${?MOGODB_URL}
          database = "minesweeper-akka-persistence"
          journal-write-concern = "Acknowledged"
          journal-collection = "akka_journal"
          snaps-collection   = "akka_snapshot"
        }
        rxmongo{
          failover {
            initialDelay = 2000ms
            retries = 3
            growth = exp
            factor = 1.5
          }
        }
      }
    }
  }

}

dispatchers{
  base-dispatcher{
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "thread-pool-executor"
    # Configuration for the thread pool
    thread-pool-executor {
      keep-alive-time = 60s
      # minimum number of threads to cap factor-based core number to
      core-pool-size-min = 8
      # No of core threads ... ceil(available processors * factor)
      core-pool-size-factor = 3.0
      # maximum number of threads to cap factor-based number to
      core-pool-size-max = 64
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 2
  }
}

http {
  host = "0.0.0.0"
  port = 8010
}